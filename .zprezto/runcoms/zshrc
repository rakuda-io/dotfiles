# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# bat theme
export BAT_THEME="gruvbox-dark"

# enhancd
source ~/enhancd/init.sh

EDITER=vi
bindkey -e

# C-zでvimにスイッチバック
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# コマンド履歴除外リスト
HISTIGNORE='?:??:???:exit:history'

# Github CLI
# リポジトリを検索して選択したPRをWebで開く
ghgrep () {
    gh search prs --repo favy-jp/favy --limit 100;
    echo "Type PR number to view web: " && read number;
    gh pr view --web ${number};
}

# ghq+fzfでリポジトリ検索&移動
function ghq-fzf() {
  # local src=$(ghq list | fzf --preview "ls -laTp $(ghq root)/{} | tail -n+4 | awk '{print \$9\"/\"\$6\"/\"\$7 \" \" \$10}'")
  local src=$(ghq list | fzf --preview "git --git-dir $(ghq root)/{}/.git log --date=short --pretty=format:'-%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --color")
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^]' ghq-fzf


# fzf settings
export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_OPTS='--preview "bat  --color=always --style=header,grid --line-range :100 {}"'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_DEFAULT_OPTS='--height 80% --reverse --inline-info --border --preview "bat  --color=always --style=header,grid --line-range :100 {}"'

# worktree移動
function cdworktree() {
    # カレントディレクトリがGitリポジトリ上かどうか
    git rev-parse &>/dev/null
    if [ $? -ne 0 ]; then
        echo fatal: Not a git repository.
        return
    fi

    local selectedWorkTreeDir=`git worktree list | fzf | awk '{print $1}'`

    if [ "$selectedWorkTreeDir" = "" ]; then
        # Ctrl-C.
        return
    fi

    cd ${selectedWorkTreeDir}
}

###### path ######

# rbenv_path
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.rbenv/bin:$PATH"
export PATH="$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"
eval "$(rbenv init - zsh)"

# pyenv_path
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# openssl_path
# 3系だと開発環境でのAppleログインが死ぬので超レガシーな1系に固定(2023/02/22 favy開発定例にて)
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
# 旧: export PATH="/usr/local/opt/openssl@3/bin:$PATH"

# mysql_path
export PATH="/usr/local/opt/mysql/bin:$PATH"

# nodebrew_path
export PATH=$HOME/.nodebrew/current/bin:$PATH

# fzf_path
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Rust_path
export PATH="$HOME/.cargo/bin:$PATH"

export W3MIMGDISPLAY_PATH=/usr/lib/w3m/w3mimgdisplay


###### alias #######

# Linuxコマンド系
alias cdd='cd ~/' # Homeディレクトリへ(enhancdを使ってるので…)
alias ls='exa --icons' # リッチなls
alias ll='exa -laF' # 通常のls
alias lt='exa -T -L 3 -a -I "node_modules|.git|.githum|.docker|.circleci|coverage|lib|log|tmp|vendor|.cache" --icons'
alias cat='bat' # シンタックス付きのリッチなcat
# alias grep='rg'
alias find='fd -i' # 検索ワード + (任意)ディレクトリ ※ 小文字大文字無視
alias ps='procs' # ps aux の代わり

# Vim系
alias vi='nvim'
alias v='nvim'
alias vim='nvim'
alias vif='nvim $(fzf)' # fzfで絞り込んでvimで開く
alias vzsh='nvim ~/.zshrc'
alias vinit='nvim -c :w ~/dotfiles/.config/nvim/init.vim'
alias vdein='v ~/dotfiles/.config/nvim/plugins/config/dein.toml'

# Railsコマンド系
alias be='bundle exec'
alias tailpuma='tail -f ~/Library/Logs/puma-dev.log' # puma-devログ
alias tailrails='tail -f log/development.log' # Railsログ

# Dockerコマンド系
alias dc='docker-compose'
alias dcu='docker-compose up'
alias dcs='docker-compose stop'
alias dcd='docker-compose down'
alias dcb='docker-compose build'

# 再起動系
alias sref='exec $SHELL -l' # shell再起動
alias zref='source ~/.zshrc' # zshrc再読み込み
alias iref='source ~/.config/nvim/init.vim' # init.vim再読み込み
# alias tref='tmux source-file ~/.tmux.conf' # TMUX再起動 -> prefix + I でもOKなので一旦コメントアウト
alias pref='puma-dev -stop' # puma-dev再起動
# alias pref='puma-dev -stop && puma-dev -install -d test' # puma-dev再起動

# gitコマンド
alias gca='git commit --amend'
alias gs='git status'
alias gl='git log --graph --oneline --decorate=full -20 --date=short --format="%C(yellow)%h%C(reset) %C(magenta)[%ad]%C(reset)%C(auto)%d%C(reset) %s %C(cyan)@%an%C(reset)"'
alias gc='git checkout'
alias gcc='git checkout $(git branch | tr -d " " |fzf --height 100% --prompt "CHECKOUT BRANCH>" --preview "git log --color=always {}" | head -n 1 | sed -e "s/^\*\s*//g" | perl -pe "s/remotes\/origin\///g")'
alias gccr='git checkout $(git branch -a | tr -d " " |fzf --height 100% --prompt "CHECKOUT BRANCH>" --preview "git log --color=always {}" | head -n 1 | sed -e "s/^\*\s*//g" | perl -pe "s/remotes\/origin\///g")'
alias gcb='git checkout -b'
alias gf='git fetch --prune' # import remote branch latest
# stash
alias gst='git stash -u' # stash current branch's changes
alias gsts='git stash save -u' # stash named save
alias gstl='tig stash' # show stash list
alias gstp='git stash pop' # import stash changes & remove the stash
# worktree
# alias gwa='git worktree add $(git branch -a | tr -d " " |fzf --height 100% --prompt "CHECKOUT BRANCH>" --preview "git log --color=always {}" | head -n 1 | sed -e "s/^\*\s*//g" | perl -pe "s/remotes\/origin\///g")'
alias gwa='git worktree add'
alias gwl='git worktree list' # git worktree一覧
alias gcw='cdworktree' # git worktreeで作ったdirにcheck out
alias gwrm='git worktree remove' # 後ろにdir指定で指定worktree削除
alias gwp='git worktree prune'

# その他
alias gemfile_local='ln -s ~/dotfiles/Gemfile.local Gemfile.local && export BUNDLE_GEMFILE="Gemfile.local"' # 個人用のGemfileをリンク
alias gemfile_local_no_use='unset BUNDLE_GEMFILE'
alias ctags="`brew --prefix`/bin/ctags"
alias ojt='oj t -c " ruby main.rb" -d test' # AtCoderのonline-judge-toolsのテスト実行
alias jobcan='ruby ~/Dev/selenium/jobcan-selenium.rb'

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
