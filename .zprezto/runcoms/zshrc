# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# bat theme
export BAT_THEME="gruvbox-dark"

# enhancd
source ~/enhancd/init.sh

EDITER=vi
bindkey -e

# C-zでvimにスイッチバック
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# fzf settings
export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_OPTS='--preview "bat  --color=always --style=header,grid --line-range :100 {}"'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_DEFAULT_OPTS='--height 80% --reverse --inline-info --border --preview "bat  --color=always --style=header,grid --line-range :100 {}"'




###### tmux ######

# function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
# function is_osx() { [[ $OSTYPE == darwin* ]]; }
# function is_screen_running() { [ ! -z "$STY" ]; }
# function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
# function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
# function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
# function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }

# function tmux_automatically_attach_session()
# {
    # if is_screen_or_tmux_running; then
        # ! is_exists 'tmux' && return 1

        # # if is_tmux_runnning; then
            # # echo "${fg_bold[red]} _____ __  __ _   ___  __ ${reset_color}"
            # # echo "${fg_bold[red]}|_   _|  \/  | | | \ \/ / ${reset_color}"
            # # echo "${fg_bold[red]}  | | | |\/| | | | |\  /  ${reset_color}"
            # # echo "${fg_bold[red]}  | | | |  | | |_| |/  \  ${reset_color}"
            # # echo "${fg_bold[red]}  |_| |_|  |_|\___//_/\_\ ${reset_color}"
        # # elif is_screen_running; then
            # # echo "This is on screen."
        # # fi
    # else
        # if shell_has_started_interactively && ! is_ssh_running; then
            # if ! is_exists 'tmux'; then
                # echo 'Error: tmux command not found' 2>&1
                # return 1
            # fi

            # if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
                # # detached session exists
                # tmux list-sessions
                # echo -n "Tmux: attach? (y/N/num) "
                # read
                # if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
                    # tmux attach-session
                    # if [ $? -eq 0 ]; then
                        # echo "$(tmux -V) attached session"
                        # return 0
                    # fi
                # elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
                    # tmux attach -t "$REPLY"
                    # if [ $? -eq 0 ]; then
                        # echo "$(tmux -V) attached session"
                        # return 0
                    # fi
                # fi
            # fi

            # if is_osx && is_exists 'reattach-to-user-namespace'; then
                # # on OS X force tmux's default command
                # # to spawn a shell in the user's namespace
                # tmux_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
                # tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X"
            # else
                # tmux new-session && echo "tmux created new session"
            # fi
        # fi
    # fi
# }
# tmux_automatically_attach_session




###### path ######

# rbenv_path
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.rbenv/bin:$PATH"
export PATH="$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH"
eval "$(rbenv init - zsh)"

# pyenv_path
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# openssl_path
export PATH="/usr/local/opt/openssl@3/bin:$PATH"

# mysql_path
export PATH="/usr/local/opt/mysql/bin:$PATH"

# nodebrew_path
export PATH=$HOME/.nodebrew/current/bin:$PATH

# fzf_path
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh




###### alias #######

alias cdd='cd ~/dev'
alias dc='docker-compose'
alias dcu='docker-compose up -d'
alias dcs='docker-compose stop'
alias be='bundle exec'
alias sref='exec $SHELL -l' # shell再起動
alias zref='source ~/.zshrc' # zshrc再起動
# alias tref='tmux source-file ~/.tmux.conf' # TMUX再起動
alias pref='puma-dev -stop && puma-dev -install -d test' # puma-dev再起動
alias gs='git status'
alias gc='git checkout '
alias gcb='git checkout -b'
alias gf='git fetch --prune' # import remote branch latest
alias gst='git stash -u' # stash current branch's changes
alias gsts='git stash save -u' # stash named save
alias gstl='git stash list' # show stash list
alias gstp='git stash pop ' # import stash changes & remove the stash
alias tailpd='tail -f ~/Library/Logs/puma-dev.log' # puma-devログ
alias tails='tail -f log/development.log' # Railsログ
alias vi='nvim'
alias v='nvim'
alias vim='nvim'
alias vif='nvim $(fzf)'
alias ll='ls -laF'
# alias t='tmux'
alias gemfile_local='ln -s ~/dotfiles/Gemfile.local Gemfile.local && export BUNDLE_GEMFILE="Gemfile.local"' # 個人用のGemfileをリンク
alias gemfile_local_no_use='unset BUNDLE_GEMFILE'
alias vzsh='v ~/.zshrc'
alias vinit='v ~/dotfiles/.config/nvim/init.vim'
alias vdein='v ~/dotfiles/.config/nvim/plugins/config/dein.toml'
alias vtmux='v ~/.tmux.conf'
alias ctags="`brew --prefix`/bin/ctags"

