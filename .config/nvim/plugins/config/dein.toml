[[plugins]] # plugin manager
repo = 'Shougo/dein.vim'

[[plugins]] # lightlineにALE情報を載せる
repo = 'maximbaz/lightline-ale'

[[plugins]] # ステータスラインカスタム
repo = 'itchyny/lightline.vim'

[[plugins]] # インデントの視認性向上
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_char_list = ['|', '¦', '┆', '┊']
'''

[[plugins]] # ()をカラー表示に
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

[[plugins]] # git操作
repo = 'tpope/vim-fugitive'

[[plugins]] # git差分表示
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  set updatetime=100
  let g:gitgutter_map_keys = 0
  let g:gitgutter_async = 1
  let g:gitgutter_sign_added = '+'
  let g:gitgutter_sign_modified = '~'
  let g:gitgutter_sign_removed = '-'
  let g:gitgutter_sign_removed_first_line = '^'
  let g:gitgutter_sign_modified_removed = '<'
  highlight GitGutterAdd ctermfg=green
  highlight GitGutterChange ctermfg=blue
  highlight GitGutterDelete ctermfg=red
  highlight GitGutterChangeDelete ctermfg=yellow
'''

[[plugins]] # FILE tree
repo = 'lambdalisue/fern.vim'
hook_add = '''
  let g:fern#default_hidden=1
  function! s:init_fern() abort
    nmap <buffer><nowait> l <Plug>(fern-action-expand)
    nmap <buffer><nowait> h <Plug>(fern-action-collapse)
    nmap <buffer><nowait> D <Plug>(fern-action-remove)
    nmap <buffer><nowait> c <Plug>(fern-action-copy)
    nmap <buffer><nowait> m <Plug>(fern-action-move)
    nmap <buffer><nowait> N <Plug>(fern-action-new-file)
    nmap <buffer><nowait> R <plug>(fern-action-rename)
    nmap <buffer><nowait> <Return> <Plug>(fern-action-open)
  endfunction
  augroup fern-custom
    autocmd! *
    autocmd FileType fern call s:init_fern()
  augroup END
'''

[[plugins]] # fernにアイコンを表示
repo = 'lambdalisue/nerdfont.vim'
[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
  let g:fern#renderer = 'nerdfont'
'''
[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
  augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree,startify call glyph_palette#apply()
  augroup END
'''

[[plugins]]# fernでプレビューを表示
repo = 'yuki-yano/fern-preview.vim'

[[plugins]] # fernにgitの状態を表示
repo = 'lambdalisue/fern-git-status.vim'
hook_add = '''
  function! s:fern_settings() abort
    nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
    nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
    nmap <sient> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
    nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
    nmap <silent> <buffer> <expr> <Plug>(fern-quit-or-close-preview) fern_preview#smart_preview("\<Plug>(fern-action-preview:close)", ":q\<CR>")
    nmap <silent> <buffer> q <Plug>(fern-quit-or-close-preview)
  endfunction
  augroup fern-settings
    autocmd!
    autocmd FileType fern call s:fern_settings()
  augroup END
'''

[[plugins]] # endを自動入力
repo = 'tpope/vim-endwise'

[[plugins]] # 閉じカッコを自動挿入
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tpope/vim-commentary' # コメント化

[[plugins]] # vim内でのicon表示
repo = 'ryanoasis/vim-devicons'

[[plugins]] # fzf本体
repo = 'junegunn/fzf'
build = './install --all'
merged = '0'

[[plugins]] # vim用fzf
repo = 'junegunn/fzf.vim'

[[plugins]] # coc.nvim
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'

[[plugins]] # ale
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_disable_lsp = 1
  let g:ale_lint_on_text_changed = 1

  function! s:show_documentation() abort
    if index(['vim','help'], &filetype) >= 0
      execute 'h ' . expand('<cword>')
    elseif coc#rpc#ready()
      call CocActionAsync('doHover')
    endif
  endfunction
  highlight clear ALEError
  highlight clear ALEWarning
  let g:ale_lint_on_enter = 0
  let g:ale_sign_column_always = 1
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  let g:ale_sign_error = '!!'
  let g:ale_sign_warning = ''
  if has('mac')
      let s:header_path = '-I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include'
      let g:ale_cpp_clang_options = '-std=c++14 -Wall ' . s:header_path
      let g:ale_cpp_gcc_options = '-std=c++14 -Wall ' . s:header_path
  endif
  let g:ale_linters = {
              \ 'ruby': ['rubocop'],
              \ 'json': ['jsonlint'],
              \ 'Dockerfile': ['dockerfile_lint', 'hadolint'],
              \ 'scss': ['stylelint']
  \ }
'''

[[plugins]] # undo履歴
repo = 'mbbill/undotree'
hook_add = '''
  nmap U :UndotreeToggle<CR>
'''

[[plugins]] # railsの支援
repo = 'tpope/vim-rails'

[[plugins]] # シンタックス詰め合わせ
repo = 'sheerun/vim-polyglot'
hook_add = '''
  let g:polyglot_disabled = ['typescript']
'''

[[plugins]] # 移動高速化
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  nmap f <Plug>(easymotion-s2)
  " EnterかSpaceで最初の候補にジャンプ
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
  " 繰り返し
  map ; <Plug>(easymotion-next)
  map , <Plug>(easymotion-prev)
  " デフォルトのインクリメントサーチをオーバーライド
  let g:EasyMotion_smartcase = 1
  map  / <Plug>(easymotion-sn)
  omap / <Plug>(easymotion-tn)
  map  n <Plug>(easymotion-next)
  map  N <Plug>(easymotion-prev)
  " 行移動
  " map <silent><Leader> <Plug>(easymotion-bd-jk)
  " nmap <silent>L <Plug>(easymotion-overwin-line)
'''

[[plugins]] # 分割したウインドウサイズを変更
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-s>'
'''

[[plugins]] # 置換
repo = 'thinca/vim-qfreplace'

[[plugins]] # color code preview
repo = 'gko/vim-coloresque'

[[plugins]] # HTML補完
repo = 'mattn/emmet-vim'

[[plugins]] # テキストを囲う補助
repo = 'tpope/vim-surround'

[[plugins]] # Visualモードの選択範囲をvで拡大縮小
repo = 'terryma/vim-expand-region'
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap V <Plug>(expand_region_shrink)
'''

[[plugins]] # 繰り返せない操作を繰り返せるように
repo = 'tpope/vim-repeat'

[[plugins]] # ターミナルエミュレータ
repo = 'kassio/neoterm'
hook_add = '''
  let g:neoterm_default_mod='belowright'
  let g:neoterm_size=25
  let g:neoterm_autoscroll=1

  nnoremap <silent> <C-t><C-t> :Ttoggle<CR>zz
  tnoremap <silent> <C-t><C-t> <C-\><C-n>:Ttoggle<CR>zz
  tnoremap <silent> <C-w> <C-\><C-n>
  nnoremap <silent> <C-t>a :Topen<CR><C-w><C-j>i<C-l><C-\><C-n><C-w><C-k>:RSpecAll<CR>
  nnoremap <silent> <C-t>f :Topen<CR><C-w><C-j>i<C-l><C-\><C-n><C-w><C-k>:RSpecFile<CR>
  nnoremap <silent> <C-t>l :Topen<CR><C-w><C-j>i<C-l><C-\><C-n><C-w><C-k>:RSpecLine<CR>
  nnoremap <silent> <C-t>c :T rails c<CR>:Topen<CR><C-w>ji
  nnoremap <silent> <C-t>t :Topen<CR>:T tig<CR><C-w>j<C-w>_i

  let g:neoterm_rspec_cmd='bundle exec rspec' " RSpecコマンド設定
  function! RSpecFile()
    let l:filename = expand('%')
    call neoterm#do({ 'cmd': join([g:neoterm_rspec_cmd, l:filename]) })
  endfunction
  function! RSpecLine()
      let l:filename = expand('%')
      let l:opt = join([l:filename, line('.')], ':')
      call neoterm#do({ 'cmd': join([g:neoterm_rspec_cmd, l:opt]) })
  endfunction
  command! RSpecAll call neoterm#do({ 'cmd': g:neoterm_rspec_cmd })
  command! RSpecFile call RSpecFile()
  command! RSpecLine call RSpecLine()
'''

[[plugins]] # operator拡張
repo = 'kana/vim-operator-user'

[[plugins]] # 置換operator
repo = 'kana/vim-operator-replace'
hook_add = '''
  map _ <Plug>(operator-replace)
'''